testing right inputs:
testing  ../test/abrouil2-right.inp
int **x, y, z;
float this[1][2][3][4][5], was, testing[arrays];

while(x){
w = y + (v * -123);
}
if(a[45])
 if(lot == of)
   if(nested){
    if(ifs)
     x = -456 * that;
   }
pcg  proj1.pt < ../test/abrouil2-right.inp
pcg  proj1.pt < ../test/abrouil2-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("*" "*" "x" "," " " "y" "," " " "z" ";" "
" "float" " " "this" "[" "1" "]"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/alanghar-right.inp
int a, b, __this_is_4_test[234][10];
;
{}{{;}}
if(some_expr == (5>=3)){
    while(a < 54.8 && j > 8 || (x > 0))
        lkj = 234 + jlksdjf[324];

    while(true){
        if(x == y)
            blah;
        else{
            while(false){
                var[4][3][2] = var[3][4];   //This is a comment. 3=5
            }
        }
    }
}
/* this is a *** /// *** ()()()(*&*^%#^%$[][]35)
block comment */pcg  proj1.pt < ../test/alanghar-right.inp
pcg  proj1.pt < ../test/alanghar-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: (";" "
" "{" "}" "{" "{" ";" "}" "}" "
" "if" "(" "some_expr" " " "==" " " "("...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/alynn-right.inp
int x, y;
int a, b;
float decarray[40];
decarray[1] = 526.2420;
x = 256;
y = 25;
a = 1;
b = 2;
if(x > y)
a = x * y;
else
b = x + 1;
x = 1;
y = 10;
while(x < y) {
/*Code to test while loop*/
a = a - 1;
x = x + 1;
}
pcg  proj1.pt < ../test/alynn-right.inp
pcg  proj1.pt < ../test/alynn-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template While_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/amoorhou-right.inp
/* This is my first comment at the top*/
int a,b,c,d,e,f;
float a[100][100];
while (a==b){
a=b;
b=a*c;
c=a/f;
d=a+b*c;
c=a*c-e;
if (!(a == b + 1 * (c - 1) / 2)){
	y=1;
	if (a<2){
		a[i]= y+1;
	}
	/* This is my second comment in the middle*/
}
if (b!=f){
	y=1;
}
if (a<=b) a=0.324;
while (x>=5) a=a-1;
/* This is my third comment at the end*/
}

pcg  proj1.pt < ../test/amoorhou-right.inp
pcg  proj1.pt < ../test/amoorhou-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/bwoodroo-right.inp
int a;
int b;
int c;
float d;
float e;

a = 1;
b = 2;
c = a + b;

d = 1.5;
e = 2.4;

while (d <= e)
{
	c = a + e;
	d = d + 0.5;
}
pcg  proj1.pt < ../test/bwoodroo-right.inp
pcg  proj1.pt < ../test/bwoodroo-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      (Decl#(
          Type_spec#"int",
          Iden#Iden2#(
              "a",
              ""))
        Decl#(
          Type_spec#"int",
          Iden#Iden2#(
              "b",
              ""))
        Decl#(
          Type_spec#"int",
          Iden#Iden2#(
              "c",
              ""))
        Decl#(
          Type_spec#"float",
          Iden#Iden2#(
              "d",
              ""))
        Decl#(
          Type_spec#"float",
          Iden#Iden2#(
              "e",
              ""))
         NULL),
      Stmt_list#(
        Stmt#Exp#(
            Assign_exp#(
              Logic_OR_exp#(
                Logic_AND_exp#(
                  Equal_exp#(
                    Relation_exp#(
                      Add_exp#(
                        Mult_exp#(
                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                    "a",
                                    ""),
                          Mult_exp_mul#Mult_exp_div#""),
                        Add_exp_plus#Add_exp_minus#""),
                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                    Equal_exp2#""),
                  Logic_AND_exp2#""),
                Logic_OR_exp2#""),
              Assign_exp2#"="Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Num#(
                                      ICONST#1,
                                      FCONST#""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"")
                 NULL),
            Exp2#""),
        Stmt_list2#Stmt_list#(
            Stmt#Exp#(
                Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                        "b",
                                        ""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"="Assign_exp#(
                      Logic_OR_exp#(
                        Logic_AND_exp#(
                          Equal_exp#(
                            Relation_exp#(
                              Add_exp#(
                                Mult_exp#(
                                  Unary_exp#Primary_exp#Value#Num#(
                                          ICONST#2,
                                          FCONST#""),
                                  Mult_exp_mul#Mult_exp_div#""),
                                Add_exp_plus#Add_exp_minus#""),
                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                            Equal_exp2#""),
                          Logic_AND_exp2#""),
                        Logic_OR_exp2#""),
                      Assign_exp2#"")
                     NULL),
                Exp2#""),
            Stmt_list2#Stmt_list#(
                Stmt#Exp#(
                    Assign_exp#(
                      Logic_OR_exp#(
                        Logic_AND_exp#(
                          Equal_exp#(
                            Relation_exp#(
                              Add_exp#(
                                Mult_exp#(
                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                            "c",
                                            ""),
                                  Mult_exp_mul#Mult_exp_div#""),
                                Add_exp_plus#Add_exp_minus#""),
                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                            Equal_exp2#""),
                          Logic_AND_exp2#""),
                        Logic_OR_exp2#""),
                      Assign_exp2#"="Assign_exp#(
                          Logic_OR_exp#(
                            Logic_AND_exp#(
                              Equal_exp#(
                                Relation_exp#(
                                  Add_exp#(
                                    Mult_exp#(
                                      Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                "a",
                                                ""),
                                      Mult_exp_mul#Mult_exp_div#""),
                                    Add_exp_plus#"+"Add_exp#(
                                        Mult_exp#(
                                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                    "b",
                                                    ""),
                                          Mult_exp_mul#Mult_exp_div#""),
                                        Add_exp_plus#Add_exp_minus#"")
                                       NULL),
                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                Equal_exp2#""),
                              Logic_AND_exp2#""),
                            Logic_OR_exp2#""),
                          Assign_exp2#"")
                         NULL),
                    Exp2#""),
                Stmt_list2#Stmt_list#(
                    Stmt#Exp#(
                        Assign_exp#(
                          Logic_OR_exp#(
                            Logic_AND_exp#(
                              Equal_exp#(
                                Relation_exp#(
                                  Add_exp#(
                                    Mult_exp#(
                                      Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                "d",
                                                ""),
                                      Mult_exp_mul#Mult_exp_div#""),
                                    Add_exp_plus#Add_exp_minus#""),
                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                Equal_exp2#""),
                              Logic_AND_exp2#""),
                            Logic_OR_exp2#""),
                          Assign_exp2#"="Assign_exp#(
                              Logic_OR_exp#(
                                Logic_AND_exp#(
                                  Equal_exp#(
                                    Relation_exp#(
                                      Add_exp#(
                                        Mult_exp#(
                                          Unary_exp#Primary_exp#Value#Num#(
                                                  ICONST#1,
                                                  FCONST#"."5 NULL),
                                          Mult_exp_mul#Mult_exp_div#""),
                                        Add_exp_plus#Add_exp_minus#""),
                                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                    Equal_exp2#""),
                                  Logic_AND_exp2#""),
                                Logic_OR_exp2#""),
                              Assign_exp2#"")
                             NULL),
                        Exp2#""),
                    Stmt_list2#Stmt_list#(
                        Stmt#Exp#(
                            Assign_exp#(
                              Logic_OR_exp#(
                                Logic_AND_exp#(
                                  Equal_exp#(
                                    Relation_exp#(
                                      Add_exp#(
                                        Mult_exp#(
                                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                    "e",
                                                    ""),
                                          Mult_exp_mul#Mult_exp_div#""),
                                        Add_exp_plus#Add_exp_minus#""),
                                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                    Equal_exp2#""),
                                  Logic_AND_exp2#""),
                                Logic_OR_exp2#""),
                              Assign_exp2#"="Assign_exp#(
                                  Logic_OR_exp#(
                                    Logic_AND_exp#(
                                      Equal_exp#(
                                        Relation_exp#(
                                          Add_exp#(
                                            Mult_exp#(
                                              Unary_exp#Primary_exp#Value#Num#(
                                                      ICONST#2,
                                                      FCONST#"."4 NULL),
                                              Mult_exp_mul#Mult_exp_div#""),
                                            Add_exp_plus#Add_exp_minus#""),
                                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                        Equal_exp2#""),
                                      Logic_AND_exp2#""),
                                    Logic_OR_exp2#""),
                                  Assign_exp2#"")
                                 NULL),
                            Exp2#""),
                        Stmt_list2#Stmt_list#(
                            Stmt#While_stmt#(
                                Exp#(
                                  Assign_exp#(
                                    Logic_OR_exp#(
                                      Logic_AND_exp#(
                                        Equal_exp#(
                                          Relation_exp#(
                                            Add_exp#(
                                              Mult_exp#(
                                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                          "d",
                                                          ""),
                                                Mult_exp_mul#Mult_exp_div#""),
                                              Add_exp_plus#Add_exp_minus#""),
                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#"<="Relation_exp#(
                                                    Add_exp#(
                                                      Mult_exp#(
                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                  "e",
                                                                  ""),
                                                        Mult_exp_mul#Mult_exp_div#""),
                                                      Add_exp_plus#Add_exp_minus#""),
                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                                   NULL),
                                          Equal_exp2#""),
                                        Logic_AND_exp2#""),
                                      Logic_OR_exp2#""),
                                    Assign_exp2#""),
                                  Exp2#""),
                                Stmt#Compound_stmt#Base#Base2#(
                                        "",
                                        Stmt_list#(
                                          Stmt#Exp#(
                                              Assign_exp#(
                                                Logic_OR_exp#(
                                                  Logic_AND_exp#(
                                                    Equal_exp#(
                                                      Relation_exp#(
                                                        Add_exp#(
                                                          Mult_exp#(
                                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                      "c",
                                                                      ""),
                                                            Mult_exp_mul#Mult_exp_div#""),
                                                          Add_exp_plus#Add_exp_minus#""),
                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                      Equal_exp2#""),
                                                    Logic_AND_exp2#""),
                                                  Logic_OR_exp2#""),
                                                Assign_exp2#"="Assign_exp#(
                                                    Logic_OR_exp#(
                                                      Logic_AND_exp#(
                                                        Equal_exp#(
                                                          Relation_exp#(
                                                            Add_exp#(
                                                              Mult_exp#(
                                                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                          "a",
                                                                          ""),
                                                                Mult_exp_mul#Mult_exp_div#""),
                                                              Add_exp_plus#"+"Add_exp#(
                                                                  Mult_exp#(
                                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                              "e",
                                                                              ""),
                                                                    Mult_exp_mul#Mult_exp_div#""),
                                                                  Add_exp_plus#Add_exp_minus#"")
                                                                 NULL),
                                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                          Equal_exp2#""),
                                                        Logic_AND_exp2#""),
                                                      Logic_OR_exp2#""),
                                                    Assign_exp2#"")
                                                   NULL),
                                              Exp2#""),
                                          Stmt_list2#Stmt_list#(
                                              Stmt#Exp#(
                                                  Assign_exp#(
                                                    Logic_OR_exp#(
                                                      Logic_AND_exp#(
                                                        Equal_exp#(
                                                          Relation_exp#(
                                                            Add_exp#(
                                                              Mult_exp#(
                                                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                          "d",
                                                                          ""),
                                                                Mult_exp_mul#Mult_exp_div#""),
                                                              Add_exp_plus#Add_exp_minus#""),
                                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                          Equal_exp2#""),
                                                        Logic_AND_exp2#""),
                                                      Logic_OR_exp2#""),
                                                    Assign_exp2#"="Assign_exp#(
                                                        Logic_OR_exp#(
                                                          Logic_AND_exp#(
                                                            Equal_exp#(
                                                              Relation_exp#(
                                                                Add_exp#(
                                                                  Mult_exp#(
                                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                              "d",
                                                                              ""),
                                                                    Mult_exp_mul#Mult_exp_div#""),
                                                                  Add_exp_plus#"+"Add_exp#(
                                                                      Mult_exp#(
                                                                        Unary_exp#Primary_exp#Value#Num#(
                                                                                ICONST#0,
                                                                                FCONST#"."5 NULL),
                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                      Add_exp_plus#Add_exp_minus#"")
                                                                     NULL),
                                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                              Equal_exp2#""),
                                                            Logic_AND_exp2#""),
                                                          Logic_OR_exp2#""),
                                                        Assign_exp2#"")
                                                       NULL),
                                                  Exp2#""),
                                              Stmt_list2#"")))),
                            Stmt_list2#"")))))))
testing  ../test/chare-right.inp
int x, y, z;
float a, b, c;
float d[100], g[100][50];

!(a == b + 1 * (c - 1) / 2)

{a = b + c; d + a + 2; }

if (a < b) c = b;
else
c = a;

while(a < b) {
a = a + 1;
}
pcg  proj1.pt < ../test/chare-right.inp
pcg  proj1.pt < ../test/chare-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 2: ("{" "a" " " "=" " " "b" " " "+" " " "c" ";" " " "d" " " "+" " " "a"...)
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/cstone2-right.inp
int a;
int b;
b = 7;
/* hello, this file is grammatically correct!  */
float  f [50][100], g [b];
;;;; /*random semicolons*/
a = 5;
/* hello
world!!!!!!!!!!!!!!!
********************
*******/

a = a + 5 - 2;
float b, c, d , e;
/* some math ---------------- */
b = 2.2 - (9 - 5) * 3 / (a + a) - ( ( b - a) / 5.0 ); 

/*random horribly spaced braces */
{ 
{int a [9]; {}
} int c; c = 7 -7 + (a); a = ( (1+1) + (3+5*2/1)) }


/* ifs and whiles*/
if ( a == 5 )
	c = 7;
if (b <= 7 && c == 1 ||!( b == 2) || 5 != 4 )
{
	a = 6 + 8;
	b = 1/2;
}
else
	6 + 7;

while ( 7 != 6 + 1)
{
	a = a + a;
	7+ 49;
}
while (6 < a)
	a = 5 - a ;

/* crazy nested ifs and while */
if ( !((7 == 7)))
{
	if ( a == b)
	{
		if ( b > c)
		{
			while ( c - 2 > 4 || b != !(c < 3))
			{	int y, z;
		
				if ( b >= 1) { x = 2; c = 7; int q; q = 0;}
			}
		}
	}
}

/* make sure negative numbers work */
float negative_variable;
negative_variable = -10 + a * c;
if (-3 == negative_variable)
	b = -1;
else
	b = a;

pcg  proj1.pt < ../test/cstone2-right.inp
pcg  proj1.pt < ../test/cstone2-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("/" "*" " " "hello" "," " " "this" " " "file" " " "is" " " "grammatically" " " "correct" "!" " ".........
=> ""

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/dsudaria-right.inp
int x[25][25], y[55][55], z[11][11];
int i, j, k;
i = 0;
while (i < 100) {
j = 0;
while (j < 100) {
if (!(z[i][j] == 0.0))
z[i][j] = 0.0;
k = 0;
while (k < 100) {
z[i][j] = z[i][j] + x[i][k] * y[k][j];
k = k + 1;
}
j = j + 1;
}
i = i + 1;
}

pcg  proj1.pt < ../test/dsudaria-right.inp
pcg  proj1.pt < ../test/dsudaria-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      (Decl#(
          Type_spec#"int",
          (Iden#Iden2#(
                "x",
                Array_ind#(
                  Value#Num#(
                      ICONST#25,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#25,
                        FCONST#""),
                    "")))
            Iden#Iden2#(
                "y",
                Array_ind#(
                  Value#Num#(
                      ICONST#55,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#55,
                        FCONST#""),
                    "")))
            Iden#Iden2#(
                "z",
                Array_ind#(
                  Value#Num#(
                      ICONST#11,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#11,
                        FCONST#""),
                    "")))
             NULL))
        Decl#(
          Type_spec#"int",
          (Iden#Iden2#(
                "i",
                "")
            Iden#Iden2#(
                "j",
                "")
            Iden#Iden2#(
                "k",
                "")
             NULL))
         NULL),
      Stmt_list#(
        Stmt#Exp#(
            Assign_exp#(
              Logic_OR_exp#(
                Logic_AND_exp#(
                  Equal_exp#(
                    Relation_exp#(
                      Add_exp#(
                        Mult_exp#(
                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                    "i",
                                    ""),
                          Mult_exp_mul#Mult_exp_div#""),
                        Add_exp_plus#Add_exp_minus#""),
                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                    Equal_exp2#""),
                  Logic_AND_exp2#""),
                Logic_OR_exp2#""),
              Assign_exp2#"="Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Num#(
                                      ICONST#0,
                                      FCONST#""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"")
                 NULL),
            Exp2#""),
        Stmt_list2#Stmt_list#(
            Stmt#While_stmt#(
                Exp#(
                  Assign_exp#(
                    Logic_OR_exp#(
                      Logic_AND_exp#(
                        Equal_exp#(
                          Relation_exp#(
                            Add_exp#(
                              Mult_exp#(
                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                          "i",
                                          ""),
                                Mult_exp_mul#Mult_exp_div#""),
                              Add_exp_plus#Add_exp_minus#""),
                            Rel_exp_lt#"<"Relation_exp#(
                                Add_exp#(
                                  Mult_exp#(
                                    Unary_exp#Primary_exp#Value#Num#(
                                            ICONST#100,
                                            FCONST#""),
                                    Mult_exp_mul#Mult_exp_div#""),
                                  Add_exp_plus#Add_exp_minus#""),
                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                               NULL),
                          Equal_exp2#""),
                        Logic_AND_exp2#""),
                      Logic_OR_exp2#""),
                    Assign_exp2#""),
                  Exp2#""),
                Stmt#Compound_stmt#Base#Base2#(
                        "",
                        Stmt_list#(
                          Stmt#Exp#(
                              Assign_exp#(
                                Logic_OR_exp#(
                                  Logic_AND_exp#(
                                    Equal_exp#(
                                      Relation_exp#(
                                        Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                      "j",
                                                      ""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#""),
                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                      Equal_exp2#""),
                                    Logic_AND_exp2#""),
                                  Logic_OR_exp2#""),
                                Assign_exp2#"="Assign_exp#(
                                    Logic_OR_exp#(
                                      Logic_AND_exp#(
                                        Equal_exp#(
                                          Relation_exp#(
                                            Add_exp#(
                                              Mult_exp#(
                                                Unary_exp#Primary_exp#Value#Num#(
                                                        ICONST#0,
                                                        FCONST#""),
                                                Mult_exp_mul#Mult_exp_div#""),
                                              Add_exp_plus#Add_exp_minus#""),
                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                          Equal_exp2#""),
                                        Logic_AND_exp2#""),
                                      Logic_OR_exp2#""),
                                    Assign_exp2#"")
                                   NULL),
                              Exp2#""),
                          Stmt_list2#Stmt_list#(
                              Stmt#While_stmt#(
                                  Exp#(
                                    Assign_exp#(
                                      Logic_OR_exp#(
                                        Logic_AND_exp#(
                                          Equal_exp#(
                                            Relation_exp#(
                                              Add_exp#(
                                                Mult_exp#(
                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                            "j",
                                                            ""),
                                                  Mult_exp_mul#Mult_exp_div#""),
                                                Add_exp_plus#Add_exp_minus#""),
                                              Rel_exp_lt#"<"Relation_exp#(
                                                  Add_exp#(
                                                    Mult_exp#(
                                                      Unary_exp#Primary_exp#Value#Num#(
                                                              ICONST#100,
                                                              FCONST#""),
                                                      Mult_exp_mul#Mult_exp_div#""),
                                                    Add_exp_plus#Add_exp_minus#""),
                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                                 NULL),
                                            Equal_exp2#""),
                                          Logic_AND_exp2#""),
                                        Logic_OR_exp2#""),
                                      Assign_exp2#""),
                                    Exp2#""),
                                  Stmt#Compound_stmt#Base#Base2#(
                                          "",
                                          Stmt_list#(
                                            Stmt#Conditional_stmt#(
                                                Exp#(
                                                  Assign_exp#(
                                                    Logic_OR_exp#(
                                                      Logic_AND_exp#(
                                                        Equal_exp#(
                                                          Relation_exp#(
                                                            Add_exp#(
                                                              Mult_exp#(
                                                                Unary_exp#Unary_exp2#(
                                                                    Unary_op#"!",
                                                                    Primary_exp#Paren_exp#Exp#(
                                                                          Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "z",
                                                                                                  Array_ind#(
                                                                                                    Value#Iden#Iden2#(
                                                                                                          "i",
                                                                                                          ""),
                                                                                                    Array_ind#(
                                                                                                      Value#Iden#Iden2#(
                                                                                                            "j",
                                                                                                            ""),
                                                                                                      ""))),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#"=="Equal_exp#(
                                                                                      Relation_exp#(
                                                                                        Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                                                    ICONST#0,
                                                                                                    FCONST#"."0 NULL),
                                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                                          Add_exp_plus#Add_exp_minus#""),
                                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                      Equal_exp2#"")
                                                                                     NULL),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#""),
                                                                          Exp2#"")),
                                                                Mult_exp_mul#Mult_exp_div#""),
                                                              Add_exp_plus#Add_exp_minus#""),
                                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                          Equal_exp2#""),
                                                        Logic_AND_exp2#""),
                                                      Logic_OR_exp2#""),
                                                    Assign_exp2#""),
                                                  Exp2#""),
                                                Stmt#Exp#(
                                                    Assign_exp#(
                                                      Logic_OR_exp#(
                                                        Logic_AND_exp#(
                                                          Equal_exp#(
                                                            Relation_exp#(
                                                              Add_exp#(
                                                                Mult_exp#(
                                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                            "z",
                                                                            Array_ind#(
                                                                              Value#Iden#Iden2#(
                                                                                    "i",
                                                                                    ""),
                                                                              Array_ind#(
                                                                                Value#Iden#Iden2#(
                                                                                      "j",
                                                                                      ""),
                                                                                ""))),
                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                Add_exp_plus#Add_exp_minus#""),
                                                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                            Equal_exp2#""),
                                                          Logic_AND_exp2#""),
                                                        Logic_OR_exp2#""),
                                                      Assign_exp2#"="Assign_exp#(
                                                          Logic_OR_exp#(
                                                            Logic_AND_exp#(
                                                              Equal_exp#(
                                                                Relation_exp#(
                                                                  Add_exp#(
                                                                    Mult_exp#(
                                                                      Unary_exp#Primary_exp#Value#Num#(
                                                                              ICONST#0,
                                                                              FCONST#"."0 NULL),
                                                                      Mult_exp_mul#Mult_exp_div#""),
                                                                    Add_exp_plus#Add_exp_minus#""),
                                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                Equal_exp2#""),
                                                              Logic_AND_exp2#""),
                                                            Logic_OR_exp2#""),
                                                          Assign_exp2#"")
                                                         NULL),
                                                    Exp2#""),
                                                Else_stmt#""),
                                            Stmt_list2#Stmt_list#(
                                                Stmt#Exp#(
                                                    Assign_exp#(
                                                      Logic_OR_exp#(
                                                        Logic_AND_exp#(
                                                          Equal_exp#(
                                                            Relation_exp#(
                                                              Add_exp#(
                                                                Mult_exp#(
                                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                            "k",
                                                                            ""),
                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                Add_exp_plus#Add_exp_minus#""),
                                                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                            Equal_exp2#""),
                                                          Logic_AND_exp2#""),
                                                        Logic_OR_exp2#""),
                                                      Assign_exp2#"="Assign_exp#(
                                                          Logic_OR_exp#(
                                                            Logic_AND_exp#(
                                                              Equal_exp#(
                                                                Relation_exp#(
                                                                  Add_exp#(
                                                                    Mult_exp#(
                                                                      Unary_exp#Primary_exp#Value#Num#(
                                                                              ICONST#0,
                                                                              FCONST#""),
                                                                      Mult_exp_mul#Mult_exp_div#""),
                                                                    Add_exp_plus#Add_exp_minus#""),
                                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                Equal_exp2#""),
                                                              Logic_AND_exp2#""),
                                                            Logic_OR_exp2#""),
                                                          Assign_exp2#"")
                                                         NULL),
                                                    Exp2#""),
                                                Stmt_list2#Stmt_list#(
                                                    Stmt#While_stmt#(
                                                        Exp#(
                                                          Assign_exp#(
                                                            Logic_OR_exp#(
                                                              Logic_AND_exp#(
                                                                Equal_exp#(
                                                                  Relation_exp#(
                                                                    Add_exp#(
                                                                      Mult_exp#(
                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                  "k",
                                                                                  ""),
                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                    Rel_exp_lt#"<"Relation_exp#(
                                                                        Add_exp#(
                                                                          Mult_exp#(
                                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                                    ICONST#100,
                                                                                    FCONST#""),
                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                          Add_exp_plus#Add_exp_minus#""),
                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                                                       NULL),
                                                                  Equal_exp2#""),
                                                                Logic_AND_exp2#""),
                                                              Logic_OR_exp2#""),
                                                            Assign_exp2#""),
                                                          Exp2#""),
                                                        Stmt#Compound_stmt#Base#Base2#(
                                                                "",
                                                                Stmt_list#(
                                                                  Stmt#Exp#(
                                                                      Assign_exp#(
                                                                        Logic_OR_exp#(
                                                                          Logic_AND_exp#(
                                                                            Equal_exp#(
                                                                              Relation_exp#(
                                                                                Add_exp#(
                                                                                  Mult_exp#(
                                                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                              "z",
                                                                                              Array_ind#(
                                                                                                Value#Iden#Iden2#(
                                                                                                      "i",
                                                                                                      ""),
                                                                                                Array_ind#(
                                                                                                  Value#Iden#Iden2#(
                                                                                                        "j",
                                                                                                        ""),
                                                                                                  ""))),
                                                                                    Mult_exp_mul#Mult_exp_div#""),
                                                                                  Add_exp_plus#Add_exp_minus#""),
                                                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                              Equal_exp2#""),
                                                                            Logic_AND_exp2#""),
                                                                          Logic_OR_exp2#""),
                                                                        Assign_exp2#"="Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "z",
                                                                                                  Array_ind#(
                                                                                                    Value#Iden#Iden2#(
                                                                                                          "i",
                                                                                                          ""),
                                                                                                    Array_ind#(
                                                                                                      Value#Iden#Iden2#(
                                                                                                            "j",
                                                                                                            ""),
                                                                                                      ""))),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#"+"Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                      "x",
                                                                                                      Array_ind#(
                                                                                                        Value#Iden#Iden2#(
                                                                                                              "i",
                                                                                                              ""),
                                                                                                        Array_ind#(
                                                                                                          Value#Iden#Iden2#(
                                                                                                                "k",
                                                                                                                ""),
                                                                                                          ""))),
                                                                                            Mult_exp_mul#"*"Mult_exp#(
                                                                                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                          "y",
                                                                                                          Array_ind#(
                                                                                                            Value#Iden#Iden2#(
                                                                                                                  "k",
                                                                                                                  ""),
                                                                                                            Array_ind#(
                                                                                                              Value#Iden#Iden2#(
                                                                                                                    "j",
                                                                                                                    ""),
                                                                                                              ""))),
                                                                                                Mult_exp_mul#Mult_exp_div#"")
                                                                                               NULL),
                                                                                          Add_exp_plus#Add_exp_minus#"")
                                                                                         NULL),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#""),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#"")
                                                                           NULL),
                                                                      Exp2#""),
                                                                  Stmt_list2#Stmt_list#(
                                                                      Stmt#Exp#(
                                                                          Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "k",
                                                                                                  ""),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#""),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#"="Assign_exp#(
                                                                                Logic_OR_exp#(
                                                                                  Logic_AND_exp#(
                                                                                    Equal_exp#(
                                                                                      Relation_exp#(
                                                                                        Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                      "k",
                                                                                                      ""),
                                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                                          Add_exp_plus#"+"Add_exp#(
                                                                                              Mult_exp#(
                                                                                                Unary_exp#Primary_exp#Value#Num#(
                                                                                                        ICONST#1,
                                                                                                        FCONST#""),
                                                                                                Mult_exp_mul#Mult_exp_div#""),
                                                                                              Add_exp_plus#Add_exp_minus#"")
                                                                                             NULL),
                                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                      Equal_exp2#""),
                                                                                    Logic_AND_exp2#""),
                                                                                  Logic_OR_exp2#""),
                                                                                Assign_exp2#"")
                                                                               NULL),
                                                                          Exp2#""),
                                                                      Stmt_list2#"")))),
                                                    Stmt_list2#Stmt_list#(
                                                        Stmt#Exp#(
                                                            Assign_exp#(
                                                              Logic_OR_exp#(
                                                                Logic_AND_exp#(
                                                                  Equal_exp#(
                                                                    Relation_exp#(
                                                                      Add_exp#(
                                                                        Mult_exp#(
                                                                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                    "j",
                                                                                    ""),
                                                                          Mult_exp_mul#Mult_exp_div#""),
                                                                        Add_exp_plus#Add_exp_minus#""),
                                                                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                    Equal_exp2#""),
                                                                  Logic_AND_exp2#""),
                                                                Logic_OR_exp2#""),
                                                              Assign_exp2#"="Assign_exp#(
                                                                  Logic_OR_exp#(
                                                                    Logic_AND_exp#(
                                                                      Equal_exp#(
                                                                        Relation_exp#(
                                                                          Add_exp#(
                                                                            Mult_exp#(
                                                                              Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                        "j",
                                                                                        ""),
                                                                              Mult_exp_mul#Mult_exp_div#""),
                                                                            Add_exp_plus#"+"Add_exp#(
                                                                                Mult_exp#(
                                                                                  Unary_exp#Primary_exp#Value#Num#(
                                                                                          ICONST#1,
                                                                                          FCONST#""),
                                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                                Add_exp_plus#Add_exp_minus#"")
                                                                               NULL),
                                                                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                        Equal_exp2#""),
                                                                      Logic_AND_exp2#""),
                                                                    Logic_OR_exp2#""),
                                                                  Assign_exp2#"")
                                                                 NULL),
                                                            Exp2#""),
                                                        Stmt_list2#"")))))),
                              Stmt_list2#Stmt_list#(
                                  Stmt#Exp#(
                                      Assign_exp#(
                                        Logic_OR_exp#(
                                          Logic_AND_exp#(
                                            Equal_exp#(
                                              Relation_exp#(
                                                Add_exp#(
                                                  Mult_exp#(
                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                              "i",
                                                              ""),
                                                    Mult_exp_mul#Mult_exp_div#""),
                                                  Add_exp_plus#Add_exp_minus#""),
                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                              Equal_exp2#""),
                                            Logic_AND_exp2#""),
                                          Logic_OR_exp2#""),
                                        Assign_exp2#"="Assign_exp#(
                                            Logic_OR_exp#(
                                              Logic_AND_exp#(
                                                Equal_exp#(
                                                  Relation_exp#(
                                                    Add_exp#(
                                                      Mult_exp#(
                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                  "i",
                                                                  ""),
                                                        Mult_exp_mul#Mult_exp_div#""),
                                                      Add_exp_plus#"+"Add_exp#(
                                                          Mult_exp#(
                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                    ICONST#1,
                                                                    FCONST#""),
                                                            Mult_exp_mul#Mult_exp_div#""),
                                                          Add_exp_plus#Add_exp_minus#"")
                                                         NULL),
                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                  Equal_exp2#""),
                                                Logic_AND_exp2#""),
                                              Logic_OR_exp2#""),
                                            Assign_exp2#"")
                                           NULL),
                                      Exp2#""),
                                  Stmt_list2#""))))),
            Stmt_list2#"")))
testing  ../test/jdobler-right.inp
int a, b, c;
a = 12;
b = 11;
c = a + b * c / (3 +4);
if ( (a != b) || (a == c) )
  /*lets do some work here*/
  {
    a = 5;
    c = c * c;
  }
else
  a = b;
float b[12];
b[2] = -4;
b[a] = +5 / -6;
pcg  proj1.pt < ../test/jdobler-right.inp
pcg  proj1.pt < ../test/jdobler-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 4: ("/" "*" "lets" " " "do" " " "some" " " "work" " " "here" "*" "/" "
" " " " " "{"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/jfoster7-right.inp
-4;
if(a<2)
{
a=a*2;
int b;
b<2; //just a boolean statement
}
else
b=2;
while(a>=2 && b==2)
{
int a;
a=2+2*2-4/8-2*5;
2-2;
}
pcg  proj1.pt < ../test/jfoster7-right.inp
pcg  proj1.pt < ../test/jfoster7-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 4: ("int" " " "b" ";" "
" "b" "<" "2" ";" " " "/" "/" "just" " " "a" " " "boolean"...)
=> "}"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/jjudd2-right.inp
int a;
float c[10];
if(b<20)
a=b+a;
while(a==2)
a=b*5-2
pcg  proj1.pt < ../test/jjudd2-right.inp
pcg  proj1.pt < ../test/jjudd2-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      (Decl#(
          Type_spec#"int",
          Iden#Iden2#(
              "a",
              ""))
        Decl#(
          Type_spec#"float",
          Iden#Iden2#(
              "c",
              Array_ind#(
                Value#Num#(
                    ICONST#10,
                    FCONST#""),
                "")))
         NULL),
      Stmt_list#(
        Stmt#Conditional_stmt#(
            Exp#(
              Assign_exp#(
                Logic_OR_exp#(
                  Logic_AND_exp#(
                    Equal_exp#(
                      Relation_exp#(
                        Add_exp#(
                          Mult_exp#(
                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                      "b",
                                      ""),
                            Mult_exp_mul#Mult_exp_div#""),
                          Add_exp_plus#Add_exp_minus#""),
                        Rel_exp_lt#"<"Relation_exp#(
                            Add_exp#(
                              Mult_exp#(
                                Unary_exp#Primary_exp#Value#Num#(
                                        ICONST#20,
                                        FCONST#""),
                                Mult_exp_mul#Mult_exp_div#""),
                              Add_exp_plus#Add_exp_minus#""),
                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                           NULL),
                      Equal_exp2#""),
                    Logic_AND_exp2#""),
                  Logic_OR_exp2#""),
                Assign_exp2#""),
              Exp2#""),
            Stmt#Exp#(
                Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                        "a",
                                        ""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"="Assign_exp#(
                      Logic_OR_exp#(
                        Logic_AND_exp#(
                          Equal_exp#(
                            Relation_exp#(
                              Add_exp#(
                                Mult_exp#(
                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                            "b",
                                            ""),
                                  Mult_exp_mul#Mult_exp_div#""),
                                Add_exp_plus#"+"Add_exp#(
                                    Mult_exp#(
                                      Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                "a",
                                                ""),
                                      Mult_exp_mul#Mult_exp_div#""),
                                    Add_exp_plus#Add_exp_minus#"")
                                   NULL),
                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                            Equal_exp2#""),
                          Logic_AND_exp2#""),
                        Logic_OR_exp2#""),
                      Assign_exp2#"")
                     NULL),
                Exp2#""),
            Else_stmt#""),
        Stmt_list2#Stmt_list#(
            Stmt#While_stmt#(
                Exp#(
                  Assign_exp#(
                    Logic_OR_exp#(
                      Logic_AND_exp#(
                        Equal_exp#(
                          Relation_exp#(
                            Add_exp#(
                              Mult_exp#(
                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                          "a",
                                          ""),
                                Mult_exp_mul#Mult_exp_div#""),
                              Add_exp_plus#Add_exp_minus#""),
                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                          Equal_exp2#"=="Equal_exp#(
                              Relation_exp#(
                                Add_exp#(
                                  Mult_exp#(
                                    Unary_exp#Primary_exp#Value#Num#(
                                            ICONST#2,
                                            FCONST#""),
                                    Mult_exp_mul#Mult_exp_div#""),
                                  Add_exp_plus#Add_exp_minus#""),
                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                              Equal_exp2#"")
                             NULL),
                        Logic_AND_exp2#""),
                      Logic_OR_exp2#""),
                    Assign_exp2#""),
                  Exp2#""),
                Stmt#Exp#(
                    Assign_exp#(
                      Logic_OR_exp#(
                        Logic_AND_exp#(
                          Equal_exp#(
                            Relation_exp#(
                              Add_exp#(
                                Mult_exp#(
                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                            "a",
                                            ""),
                                  Mult_exp_mul#Mult_exp_div#""),
                                Add_exp_plus#Add_exp_minus#""),
                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                            Equal_exp2#""),
                          Logic_AND_exp2#""),
                        Logic_OR_exp2#""),
                      Assign_exp2#"="Assign_exp#(
                          Logic_OR_exp#(
                            Logic_AND_exp#(
                              Equal_exp#(
                                Relation_exp#(
                                  Add_exp#(
                                    Mult_exp#(
                                      Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                "b",
                                                ""),
                                      Mult_exp_mul#"*"Mult_exp#(
                                          Unary_exp#Primary_exp#Value#Num#(
                                                  ICONST#5,
                                                  FCONST#""),
                                          Mult_exp_mul#Mult_exp_div#"")
                                         NULL),
                                    Add_exp_plus#Add_exp_minus#"-"Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Num#(
                                                    ICONST#2,
                                                    FCONST#""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#"")
                                         NULL),
                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                Equal_exp2#""),
                              Logic_AND_exp2#""),
                            Logic_OR_exp2#""),
                          Assign_exp2#"")
                         NULL),
                    Exp2#"")),
            Stmt_list2#"")))
testing  ../test/jlail-right.inp
int x, y, z;
float a[100], b[200], c[12][12][12][12];

y = 5;
z = 10 + 2;
x = y + z;

while (x == 5)
{
	y = 3 + z;
}

while (x >= z)
	z = z + 1;

while (!(x))
{
	x = z + y - a[100];
}

y = +3;
y = -3;

if (x == 1 && y == 0)
{
	x = 3;
	y = 4;
}

if (x+1 == 3)
{
	x = -(10 - y) + (+z);
}

{a = b + c; d = a * 2;}

if (a < b) c = b; else c = a;pcg  proj1.pt < ../test/jlail-right.inp
pcg  proj1.pt < ../test/jlail-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 17: ("+" "3" ";" "
" "y" " " "=" " " "-" "3" ";" "
" "
" "if" " " "(" "x"...)
=> "("

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/kknight-right.inp
int i, j, k;
float x[20];

i = -43;
k = 0;

if (i >= 0) j = i + 15; else j = i;

while (k < 20) {
k = k + 1;
x[k] = 0;
}

pcg  proj1.pt < ../test/kknight-right.inp
pcg  proj1.pt < ../test/kknight-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      (Decl#(
          Type_spec#"int",
          (Iden#Iden2#(
                "i",
                "")
            Iden#Iden2#(
                "j",
                "")
            Iden#Iden2#(
                "k",
                "")
             NULL))
        Decl#(
          Type_spec#"float",
          Iden#Iden2#(
              "x",
              Array_ind#(
                Value#Num#(
                    ICONST#20,
                    FCONST#""),
                "")))
         NULL),
      Stmt_list#(
        Stmt#Exp#(
            Assign_exp#(
              Logic_OR_exp#(
                Logic_AND_exp#(
                  Equal_exp#(
                    Relation_exp#(
                      Add_exp#(
                        Mult_exp#(
                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                    "i",
                                    ""),
                          Mult_exp_mul#Mult_exp_div#""),
                        Add_exp_plus#Add_exp_minus#""),
                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                    Equal_exp2#""),
                  Logic_AND_exp2#""),
                Logic_OR_exp2#""),
              Assign_exp2#"="Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Num#(
                                      ICONST#"-"43 NULL,
                                      FCONST#""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"")
                 NULL),
            Exp2#""),
        Stmt_list2#Stmt_list#(
            Stmt#Exp#(
                Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                        "k",
                                        ""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"="Assign_exp#(
                      Logic_OR_exp#(
                        Logic_AND_exp#(
                          Equal_exp#(
                            Relation_exp#(
                              Add_exp#(
                                Mult_exp#(
                                  Unary_exp#Primary_exp#Value#Num#(
                                          ICONST#0,
                                          FCONST#""),
                                  Mult_exp_mul#Mult_exp_div#""),
                                Add_exp_plus#Add_exp_minus#""),
                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                            Equal_exp2#""),
                          Logic_AND_exp2#""),
                        Logic_OR_exp2#""),
                      Assign_exp2#"")
                     NULL),
                Exp2#""),
            Stmt_list2#Stmt_list#(
                Stmt#Conditional_stmt#(
                    Exp#(
                      Assign_exp#(
                        Logic_OR_exp#(
                          Logic_AND_exp#(
                            Equal_exp#(
                              Relation_exp#(
                                Add_exp#(
                                  Mult_exp#(
                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                              "i",
                                              ""),
                                    Mult_exp_mul#Mult_exp_div#""),
                                  Add_exp_plus#Add_exp_minus#""),
                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#">="Relation_exp#(
                                          Add_exp#(
                                            Mult_exp#(
                                              Unary_exp#Primary_exp#Value#Num#(
                                                      ICONST#0,
                                                      FCONST#""),
                                              Mult_exp_mul#Mult_exp_div#""),
                                            Add_exp_plus#Add_exp_minus#""),
                                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                         NULL),
                              Equal_exp2#""),
                            Logic_AND_exp2#""),
                          Logic_OR_exp2#""),
                        Assign_exp2#""),
                      Exp2#""),
                    Stmt#Exp#(
                        Assign_exp#(
                          Logic_OR_exp#(
                            Logic_AND_exp#(
                              Equal_exp#(
                                Relation_exp#(
                                  Add_exp#(
                                    Mult_exp#(
                                      Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                "j",
                                                ""),
                                      Mult_exp_mul#Mult_exp_div#""),
                                    Add_exp_plus#Add_exp_minus#""),
                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                Equal_exp2#""),
                              Logic_AND_exp2#""),
                            Logic_OR_exp2#""),
                          Assign_exp2#"="Assign_exp#(
                              Logic_OR_exp#(
                                Logic_AND_exp#(
                                  Equal_exp#(
                                    Relation_exp#(
                                      Add_exp#(
                                        Mult_exp#(
                                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                    "i",
                                                    ""),
                                          Mult_exp_mul#Mult_exp_div#""),
                                        Add_exp_plus#"+"Add_exp#(
                                            Mult_exp#(
                                              Unary_exp#Primary_exp#Value#Num#(
                                                      ICONST#15,
                                                      FCONST#""),
                                              Mult_exp_mul#Mult_exp_div#""),
                                            Add_exp_plus#Add_exp_minus#"")
                                           NULL),
                                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                    Equal_exp2#""),
                                  Logic_AND_exp2#""),
                                Logic_OR_exp2#""),
                              Assign_exp2#"")
                             NULL),
                        Exp2#""),
                    Else_stmt#"else"Stmt#Exp#(
                          Assign_exp#(
                            Logic_OR_exp#(
                              Logic_AND_exp#(
                                Equal_exp#(
                                  Relation_exp#(
                                    Add_exp#(
                                      Mult_exp#(
                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                  "j",
                                                  ""),
                                        Mult_exp_mul#Mult_exp_div#""),
                                      Add_exp_plus#Add_exp_minus#""),
                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                  Equal_exp2#""),
                                Logic_AND_exp2#""),
                              Logic_OR_exp2#""),
                            Assign_exp2#"="Assign_exp#(
                                Logic_OR_exp#(
                                  Logic_AND_exp#(
                                    Equal_exp#(
                                      Relation_exp#(
                                        Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                      "i",
                                                      ""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#""),
                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                      Equal_exp2#""),
                                    Logic_AND_exp2#""),
                                  Logic_OR_exp2#""),
                                Assign_exp2#"")
                               NULL),
                          Exp2#"")
                       NULL),
                Stmt_list2#Stmt_list#(
                    Stmt#While_stmt#(
                        Exp#(
                          Assign_exp#(
                            Logic_OR_exp#(
                              Logic_AND_exp#(
                                Equal_exp#(
                                  Relation_exp#(
                                    Add_exp#(
                                      Mult_exp#(
                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                  "k",
                                                  ""),
                                        Mult_exp_mul#Mult_exp_div#""),
                                      Add_exp_plus#Add_exp_minus#""),
                                    Rel_exp_lt#"<"Relation_exp#(
                                        Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Num#(
                                                    ICONST#20,
                                                    FCONST#""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#""),
                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                       NULL),
                                  Equal_exp2#""),
                                Logic_AND_exp2#""),
                              Logic_OR_exp2#""),
                            Assign_exp2#""),
                          Exp2#""),
                        Stmt#Compound_stmt#Base#Base2#(
                                "",
                                Stmt_list#(
                                  Stmt#Exp#(
                                      Assign_exp#(
                                        Logic_OR_exp#(
                                          Logic_AND_exp#(
                                            Equal_exp#(
                                              Relation_exp#(
                                                Add_exp#(
                                                  Mult_exp#(
                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                              "k",
                                                              ""),
                                                    Mult_exp_mul#Mult_exp_div#""),
                                                  Add_exp_plus#Add_exp_minus#""),
                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                              Equal_exp2#""),
                                            Logic_AND_exp2#""),
                                          Logic_OR_exp2#""),
                                        Assign_exp2#"="Assign_exp#(
                                            Logic_OR_exp#(
                                              Logic_AND_exp#(
                                                Equal_exp#(
                                                  Relation_exp#(
                                                    Add_exp#(
                                                      Mult_exp#(
                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                  "k",
                                                                  ""),
                                                        Mult_exp_mul#Mult_exp_div#""),
                                                      Add_exp_plus#"+"Add_exp#(
                                                          Mult_exp#(
                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                    ICONST#1,
                                                                    FCONST#""),
                                                            Mult_exp_mul#Mult_exp_div#""),
                                                          Add_exp_plus#Add_exp_minus#"")
                                                         NULL),
                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                  Equal_exp2#""),
                                                Logic_AND_exp2#""),
                                              Logic_OR_exp2#""),
                                            Assign_exp2#"")
                                           NULL),
                                      Exp2#""),
                                  Stmt_list2#Stmt_list#(
                                      Stmt#Exp#(
                                          Assign_exp#(
                                            Logic_OR_exp#(
                                              Logic_AND_exp#(
                                                Equal_exp#(
                                                  Relation_exp#(
                                                    Add_exp#(
                                                      Mult_exp#(
                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                  "x",
                                                                  Array_ind#(
                                                                    Value#Iden#Iden2#(
                                                                          "k",
                                                                          ""),
                                                                    "")),
                                                        Mult_exp_mul#Mult_exp_div#""),
                                                      Add_exp_plus#Add_exp_minus#""),
                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                  Equal_exp2#""),
                                                Logic_AND_exp2#""),
                                              Logic_OR_exp2#""),
                                            Assign_exp2#"="Assign_exp#(
                                                Logic_OR_exp#(
                                                  Logic_AND_exp#(
                                                    Equal_exp#(
                                                      Relation_exp#(
                                                        Add_exp#(
                                                          Mult_exp#(
                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                    ICONST#0,
                                                                    FCONST#""),
                                                            Mult_exp_mul#Mult_exp_div#""),
                                                          Add_exp_plus#Add_exp_minus#""),
                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                      Equal_exp2#""),
                                                    Logic_AND_exp2#""),
                                                  Logic_OR_exp2#""),
                                                Assign_exp2#"")
                                               NULL),
                                          Exp2#""),
                                      Stmt_list2#"")))),
                    Stmt_list2#"")))))
testing  ../test/mbrown22-right.inp
int a, b[100], c[2000][10], d[a];
float g, h[a][100], i;
a[g] = (a[12]+b)-c*c/w;
b=10.0;
while(a-b>=c) 
{
   while(b<=c) int a;
}

if(!(g[100][a] == 10.0))
{
   if(i!=j)
   {
      int y;
      if(k==l) int b;
   }
}
else
{
   int x;
}
pcg  proj1.pt < ../test/mbrown22-right.inp
pcg  proj1.pt < ../test/mbrown22-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 4: ("int" " " "a" ";" "
" "}" "
" "
" "if" "(" "!" "(" "g" "[" "100" "]" "["...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/mevans-right.inp
/* This is a comment */
int a, b, c, d;
float e;
a = -5;



b = 6;
	c = 12;
d = -20; // another comment
e = -2.3;
if (a >= (b * 2)) {
a = a + 5;
if ((c == d) || (((b - d)/2) < 100)) {
c = c + 10;
}
} else {
b = 0;
a = b + c;
d = a / 2;
}
pcg  proj1.pt < ../test/mevans-right.inp
pcg  proj1.pt < ../test/mevans-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/ncarlson-right.inp
int a;
int b;
int c;

a = (a * b) / (b + c) * -23244;

{
	float a[100][100], b[100], c[100][100];
	int i, j, k;
	iijeg = 0;
}

{
	i = i;
	c = a * b / c + c * a - b;
	/* Nested block example...*/
	{
		int i;
	}
}

while (a > b)
	b - c;

while (a < b && ((i <= 4)))
{
	int a;
	int b;

	if (!(a == b + 1 * (c - 1) / 2)) 
	{
		if (c == b)
		{
			c = 4 == c;
		}
	}	
	else
		c = a;
}

while ((a == b) && a < c)
	a = a + 1;pcg  proj1.pt < ../test/ncarlson-right.inp
pcg  proj1.pt < ../test/ncarlson-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 9: ("/" "*" " " "Nested" " " "block" " " "example" "." "." "." "*" "/" "
" "	" "{" "
"...)
=> "}"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/pleedom-right.inp
{
/* this is a C comment */
int a[100][10], b, c[10],d;
float x[100][10], y, z[10];
b = d;
y = -10.034;
b = -5;
b = -b;
d =--b;
d = !-b;
d = !-5;
d = -!b;
d = -!5;
{;;{};;} /* WHO WOULD DO THIS??? */

b=d=a[10][2]=10;
 
while (!a[100][1])  /* Comments in a line */
{
    if (!(a[10][2]==b))
    {
        int f;
	int g;
	9+9--10+5*13/-5;
        c[10] = 0;
        while (c[10]=0)
        {
            if ( 1+1 ) c[10]=1;
            else
            {
                int h;
		10+10;
                8+8;
            }
        }
     }
     else b = 20;
     if (3+3) a[100][1] = 1;
}
}
pcg  proj1.pt < ../test/pleedom-right.inp
pcg  proj1.pt < ../test/pleedom-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/right1.inp
float a[100][100], b[100][100], c[100][100];
int i, j, k;
i = 0;
while (i < 100) {
j = 0;
while (j < 100) {
if (!(c[i][j] == 0.0))
c[i][j] = 0.0;
k = 0;
while (k < 100) {
c[i][j] = c[i][j] + a[i][k] * b[k][j];
k = k + 1;
}
j = j + 1;
}
i = i + 1;
}

pcg  proj1.pt < ../test/right1.inp
pcg  proj1.pt < ../test/right1.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      (Decl#(
          Type_spec#"float",
          (Iden#Iden2#(
                "a",
                Array_ind#(
                  Value#Num#(
                      ICONST#100,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#100,
                        FCONST#""),
                    "")))
            Iden#Iden2#(
                "b",
                Array_ind#(
                  Value#Num#(
                      ICONST#100,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#100,
                        FCONST#""),
                    "")))
            Iden#Iden2#(
                "c",
                Array_ind#(
                  Value#Num#(
                      ICONST#100,
                      FCONST#""),
                  Array_ind#(
                    Value#Num#(
                        ICONST#100,
                        FCONST#""),
                    "")))
             NULL))
        Decl#(
          Type_spec#"int",
          (Iden#Iden2#(
                "i",
                "")
            Iden#Iden2#(
                "j",
                "")
            Iden#Iden2#(
                "k",
                "")
             NULL))
         NULL),
      Stmt_list#(
        Stmt#Exp#(
            Assign_exp#(
              Logic_OR_exp#(
                Logic_AND_exp#(
                  Equal_exp#(
                    Relation_exp#(
                      Add_exp#(
                        Mult_exp#(
                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                    "i",
                                    ""),
                          Mult_exp_mul#Mult_exp_div#""),
                        Add_exp_plus#Add_exp_minus#""),
                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                    Equal_exp2#""),
                  Logic_AND_exp2#""),
                Logic_OR_exp2#""),
              Assign_exp2#"="Assign_exp#(
                  Logic_OR_exp#(
                    Logic_AND_exp#(
                      Equal_exp#(
                        Relation_exp#(
                          Add_exp#(
                            Mult_exp#(
                              Unary_exp#Primary_exp#Value#Num#(
                                      ICONST#0,
                                      FCONST#""),
                              Mult_exp_mul#Mult_exp_div#""),
                            Add_exp_plus#Add_exp_minus#""),
                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                        Equal_exp2#""),
                      Logic_AND_exp2#""),
                    Logic_OR_exp2#""),
                  Assign_exp2#"")
                 NULL),
            Exp2#""),
        Stmt_list2#Stmt_list#(
            Stmt#While_stmt#(
                Exp#(
                  Assign_exp#(
                    Logic_OR_exp#(
                      Logic_AND_exp#(
                        Equal_exp#(
                          Relation_exp#(
                            Add_exp#(
                              Mult_exp#(
                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                          "i",
                                          ""),
                                Mult_exp_mul#Mult_exp_div#""),
                              Add_exp_plus#Add_exp_minus#""),
                            Rel_exp_lt#"<"Relation_exp#(
                                Add_exp#(
                                  Mult_exp#(
                                    Unary_exp#Primary_exp#Value#Num#(
                                            ICONST#100,
                                            FCONST#""),
                                    Mult_exp_mul#Mult_exp_div#""),
                                  Add_exp_plus#Add_exp_minus#""),
                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                               NULL),
                          Equal_exp2#""),
                        Logic_AND_exp2#""),
                      Logic_OR_exp2#""),
                    Assign_exp2#""),
                  Exp2#""),
                Stmt#Compound_stmt#Base#Base2#(
                        "",
                        Stmt_list#(
                          Stmt#Exp#(
                              Assign_exp#(
                                Logic_OR_exp#(
                                  Logic_AND_exp#(
                                    Equal_exp#(
                                      Relation_exp#(
                                        Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                      "j",
                                                      ""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#""),
                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                      Equal_exp2#""),
                                    Logic_AND_exp2#""),
                                  Logic_OR_exp2#""),
                                Assign_exp2#"="Assign_exp#(
                                    Logic_OR_exp#(
                                      Logic_AND_exp#(
                                        Equal_exp#(
                                          Relation_exp#(
                                            Add_exp#(
                                              Mult_exp#(
                                                Unary_exp#Primary_exp#Value#Num#(
                                                        ICONST#0,
                                                        FCONST#""),
                                                Mult_exp_mul#Mult_exp_div#""),
                                              Add_exp_plus#Add_exp_minus#""),
                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                          Equal_exp2#""),
                                        Logic_AND_exp2#""),
                                      Logic_OR_exp2#""),
                                    Assign_exp2#"")
                                   NULL),
                              Exp2#""),
                          Stmt_list2#Stmt_list#(
                              Stmt#While_stmt#(
                                  Exp#(
                                    Assign_exp#(
                                      Logic_OR_exp#(
                                        Logic_AND_exp#(
                                          Equal_exp#(
                                            Relation_exp#(
                                              Add_exp#(
                                                Mult_exp#(
                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                            "j",
                                                            ""),
                                                  Mult_exp_mul#Mult_exp_div#""),
                                                Add_exp_plus#Add_exp_minus#""),
                                              Rel_exp_lt#"<"Relation_exp#(
                                                  Add_exp#(
                                                    Mult_exp#(
                                                      Unary_exp#Primary_exp#Value#Num#(
                                                              ICONST#100,
                                                              FCONST#""),
                                                      Mult_exp_mul#Mult_exp_div#""),
                                                    Add_exp_plus#Add_exp_minus#""),
                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                                 NULL),
                                            Equal_exp2#""),
                                          Logic_AND_exp2#""),
                                        Logic_OR_exp2#""),
                                      Assign_exp2#""),
                                    Exp2#""),
                                  Stmt#Compound_stmt#Base#Base2#(
                                          "",
                                          Stmt_list#(
                                            Stmt#Conditional_stmt#(
                                                Exp#(
                                                  Assign_exp#(
                                                    Logic_OR_exp#(
                                                      Logic_AND_exp#(
                                                        Equal_exp#(
                                                          Relation_exp#(
                                                            Add_exp#(
                                                              Mult_exp#(
                                                                Unary_exp#Unary_exp2#(
                                                                    Unary_op#"!",
                                                                    Primary_exp#Paren_exp#Exp#(
                                                                          Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "c",
                                                                                                  Array_ind#(
                                                                                                    Value#Iden#Iden2#(
                                                                                                          "i",
                                                                                                          ""),
                                                                                                    Array_ind#(
                                                                                                      Value#Iden#Iden2#(
                                                                                                            "j",
                                                                                                            ""),
                                                                                                      ""))),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#"=="Equal_exp#(
                                                                                      Relation_exp#(
                                                                                        Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                                                    ICONST#0,
                                                                                                    FCONST#"."0 NULL),
                                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                                          Add_exp_plus#Add_exp_minus#""),
                                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                      Equal_exp2#"")
                                                                                     NULL),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#""),
                                                                          Exp2#"")),
                                                                Mult_exp_mul#Mult_exp_div#""),
                                                              Add_exp_plus#Add_exp_minus#""),
                                                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                          Equal_exp2#""),
                                                        Logic_AND_exp2#""),
                                                      Logic_OR_exp2#""),
                                                    Assign_exp2#""),
                                                  Exp2#""),
                                                Stmt#Exp#(
                                                    Assign_exp#(
                                                      Logic_OR_exp#(
                                                        Logic_AND_exp#(
                                                          Equal_exp#(
                                                            Relation_exp#(
                                                              Add_exp#(
                                                                Mult_exp#(
                                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                            "c",
                                                                            Array_ind#(
                                                                              Value#Iden#Iden2#(
                                                                                    "i",
                                                                                    ""),
                                                                              Array_ind#(
                                                                                Value#Iden#Iden2#(
                                                                                      "j",
                                                                                      ""),
                                                                                ""))),
                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                Add_exp_plus#Add_exp_minus#""),
                                                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                            Equal_exp2#""),
                                                          Logic_AND_exp2#""),
                                                        Logic_OR_exp2#""),
                                                      Assign_exp2#"="Assign_exp#(
                                                          Logic_OR_exp#(
                                                            Logic_AND_exp#(
                                                              Equal_exp#(
                                                                Relation_exp#(
                                                                  Add_exp#(
                                                                    Mult_exp#(
                                                                      Unary_exp#Primary_exp#Value#Num#(
                                                                              ICONST#0,
                                                                              FCONST#"."0 NULL),
                                                                      Mult_exp_mul#Mult_exp_div#""),
                                                                    Add_exp_plus#Add_exp_minus#""),
                                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                Equal_exp2#""),
                                                              Logic_AND_exp2#""),
                                                            Logic_OR_exp2#""),
                                                          Assign_exp2#"")
                                                         NULL),
                                                    Exp2#""),
                                                Else_stmt#""),
                                            Stmt_list2#Stmt_list#(
                                                Stmt#Exp#(
                                                    Assign_exp#(
                                                      Logic_OR_exp#(
                                                        Logic_AND_exp#(
                                                          Equal_exp#(
                                                            Relation_exp#(
                                                              Add_exp#(
                                                                Mult_exp#(
                                                                  Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                            "k",
                                                                            ""),
                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                Add_exp_plus#Add_exp_minus#""),
                                                              Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                            Equal_exp2#""),
                                                          Logic_AND_exp2#""),
                                                        Logic_OR_exp2#""),
                                                      Assign_exp2#"="Assign_exp#(
                                                          Logic_OR_exp#(
                                                            Logic_AND_exp#(
                                                              Equal_exp#(
                                                                Relation_exp#(
                                                                  Add_exp#(
                                                                    Mult_exp#(
                                                                      Unary_exp#Primary_exp#Value#Num#(
                                                                              ICONST#0,
                                                                              FCONST#""),
                                                                      Mult_exp_mul#Mult_exp_div#""),
                                                                    Add_exp_plus#Add_exp_minus#""),
                                                                  Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                Equal_exp2#""),
                                                              Logic_AND_exp2#""),
                                                            Logic_OR_exp2#""),
                                                          Assign_exp2#"")
                                                         NULL),
                                                    Exp2#""),
                                                Stmt_list2#Stmt_list#(
                                                    Stmt#While_stmt#(
                                                        Exp#(
                                                          Assign_exp#(
                                                            Logic_OR_exp#(
                                                              Logic_AND_exp#(
                                                                Equal_exp#(
                                                                  Relation_exp#(
                                                                    Add_exp#(
                                                                      Mult_exp#(
                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                  "k",
                                                                                  ""),
                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                    Rel_exp_lt#"<"Relation_exp#(
                                                                        Add_exp#(
                                                                          Mult_exp#(
                                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                                    ICONST#100,
                                                                                    FCONST#""),
                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                          Add_exp_plus#Add_exp_minus#""),
                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#"")
                                                                       NULL),
                                                                  Equal_exp2#""),
                                                                Logic_AND_exp2#""),
                                                              Logic_OR_exp2#""),
                                                            Assign_exp2#""),
                                                          Exp2#""),
                                                        Stmt#Compound_stmt#Base#Base2#(
                                                                "",
                                                                Stmt_list#(
                                                                  Stmt#Exp#(
                                                                      Assign_exp#(
                                                                        Logic_OR_exp#(
                                                                          Logic_AND_exp#(
                                                                            Equal_exp#(
                                                                              Relation_exp#(
                                                                                Add_exp#(
                                                                                  Mult_exp#(
                                                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                              "c",
                                                                                              Array_ind#(
                                                                                                Value#Iden#Iden2#(
                                                                                                      "i",
                                                                                                      ""),
                                                                                                Array_ind#(
                                                                                                  Value#Iden#Iden2#(
                                                                                                        "j",
                                                                                                        ""),
                                                                                                  ""))),
                                                                                    Mult_exp_mul#Mult_exp_div#""),
                                                                                  Add_exp_plus#Add_exp_minus#""),
                                                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                              Equal_exp2#""),
                                                                            Logic_AND_exp2#""),
                                                                          Logic_OR_exp2#""),
                                                                        Assign_exp2#"="Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "c",
                                                                                                  Array_ind#(
                                                                                                    Value#Iden#Iden2#(
                                                                                                          "i",
                                                                                                          ""),
                                                                                                    Array_ind#(
                                                                                                      Value#Iden#Iden2#(
                                                                                                            "j",
                                                                                                            ""),
                                                                                                      ""))),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#"+"Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                      "a",
                                                                                                      Array_ind#(
                                                                                                        Value#Iden#Iden2#(
                                                                                                              "i",
                                                                                                              ""),
                                                                                                        Array_ind#(
                                                                                                          Value#Iden#Iden2#(
                                                                                                                "k",
                                                                                                                ""),
                                                                                                          ""))),
                                                                                            Mult_exp_mul#"*"Mult_exp#(
                                                                                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                          "b",
                                                                                                          Array_ind#(
                                                                                                            Value#Iden#Iden2#(
                                                                                                                  "k",
                                                                                                                  ""),
                                                                                                            Array_ind#(
                                                                                                              Value#Iden#Iden2#(
                                                                                                                    "j",
                                                                                                                    ""),
                                                                                                              ""))),
                                                                                                Mult_exp_mul#Mult_exp_div#"")
                                                                                               NULL),
                                                                                          Add_exp_plus#Add_exp_minus#"")
                                                                                         NULL),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#""),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#"")
                                                                           NULL),
                                                                      Exp2#""),
                                                                  Stmt_list2#Stmt_list#(
                                                                      Stmt#Exp#(
                                                                          Assign_exp#(
                                                                            Logic_OR_exp#(
                                                                              Logic_AND_exp#(
                                                                                Equal_exp#(
                                                                                  Relation_exp#(
                                                                                    Add_exp#(
                                                                                      Mult_exp#(
                                                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                  "k",
                                                                                                  ""),
                                                                                        Mult_exp_mul#Mult_exp_div#""),
                                                                                      Add_exp_plus#Add_exp_minus#""),
                                                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                  Equal_exp2#""),
                                                                                Logic_AND_exp2#""),
                                                                              Logic_OR_exp2#""),
                                                                            Assign_exp2#"="Assign_exp#(
                                                                                Logic_OR_exp#(
                                                                                  Logic_AND_exp#(
                                                                                    Equal_exp#(
                                                                                      Relation_exp#(
                                                                                        Add_exp#(
                                                                                          Mult_exp#(
                                                                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                                      "k",
                                                                                                      ""),
                                                                                            Mult_exp_mul#Mult_exp_div#""),
                                                                                          Add_exp_plus#"+"Add_exp#(
                                                                                              Mult_exp#(
                                                                                                Unary_exp#Primary_exp#Value#Num#(
                                                                                                        ICONST#1,
                                                                                                        FCONST#""),
                                                                                                Mult_exp_mul#Mult_exp_div#""),
                                                                                              Add_exp_plus#Add_exp_minus#"")
                                                                                             NULL),
                                                                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                                      Equal_exp2#""),
                                                                                    Logic_AND_exp2#""),
                                                                                  Logic_OR_exp2#""),
                                                                                Assign_exp2#"")
                                                                               NULL),
                                                                          Exp2#""),
                                                                      Stmt_list2#"")))),
                                                    Stmt_list2#Stmt_list#(
                                                        Stmt#Exp#(
                                                            Assign_exp#(
                                                              Logic_OR_exp#(
                                                                Logic_AND_exp#(
                                                                  Equal_exp#(
                                                                    Relation_exp#(
                                                                      Add_exp#(
                                                                        Mult_exp#(
                                                                          Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                    "j",
                                                                                    ""),
                                                                          Mult_exp_mul#Mult_exp_div#""),
                                                                        Add_exp_plus#Add_exp_minus#""),
                                                                      Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                    Equal_exp2#""),
                                                                  Logic_AND_exp2#""),
                                                                Logic_OR_exp2#""),
                                                              Assign_exp2#"="Assign_exp#(
                                                                  Logic_OR_exp#(
                                                                    Logic_AND_exp#(
                                                                      Equal_exp#(
                                                                        Relation_exp#(
                                                                          Add_exp#(
                                                                            Mult_exp#(
                                                                              Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                                        "j",
                                                                                        ""),
                                                                              Mult_exp_mul#Mult_exp_div#""),
                                                                            Add_exp_plus#"+"Add_exp#(
                                                                                Mult_exp#(
                                                                                  Unary_exp#Primary_exp#Value#Num#(
                                                                                          ICONST#1,
                                                                                          FCONST#""),
                                                                                  Mult_exp_mul#Mult_exp_div#""),
                                                                                Add_exp_plus#Add_exp_minus#"")
                                                                               NULL),
                                                                          Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                                        Equal_exp2#""),
                                                                      Logic_AND_exp2#""),
                                                                    Logic_OR_exp2#""),
                                                                  Assign_exp2#"")
                                                                 NULL),
                                                            Exp2#""),
                                                        Stmt_list2#"")))))),
                              Stmt_list2#Stmt_list#(
                                  Stmt#Exp#(
                                      Assign_exp#(
                                        Logic_OR_exp#(
                                          Logic_AND_exp#(
                                            Equal_exp#(
                                              Relation_exp#(
                                                Add_exp#(
                                                  Mult_exp#(
                                                    Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                              "i",
                                                              ""),
                                                    Mult_exp_mul#Mult_exp_div#""),
                                                  Add_exp_plus#Add_exp_minus#""),
                                                Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                              Equal_exp2#""),
                                            Logic_AND_exp2#""),
                                          Logic_OR_exp2#""),
                                        Assign_exp2#"="Assign_exp#(
                                            Logic_OR_exp#(
                                              Logic_AND_exp#(
                                                Equal_exp#(
                                                  Relation_exp#(
                                                    Add_exp#(
                                                      Mult_exp#(
                                                        Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                                  "i",
                                                                  ""),
                                                        Mult_exp_mul#Mult_exp_div#""),
                                                      Add_exp_plus#"+"Add_exp#(
                                                          Mult_exp#(
                                                            Unary_exp#Primary_exp#Value#Num#(
                                                                    ICONST#1,
                                                                    FCONST#""),
                                                            Mult_exp_mul#Mult_exp_div#""),
                                                          Add_exp_plus#Add_exp_minus#"")
                                                         NULL),
                                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                                  Equal_exp2#""),
                                                Logic_AND_exp2#""),
                                              Logic_OR_exp2#""),
                                            Assign_exp2#"")
                                           NULL),
                                      Exp2#""),
                                  Stmt_list2#""))))),
            Stmt_list2#"")))
testing  ../test/rmascare-right.inp
int p[9][9], r[8][8], s[7][7];
int a, b, c;
a = 6;
while (a < 20) {
b = 5;
while (b < 21) {
if (!(s[a][b] == 0.0))
s[a][b] = 0.0;
c = 4;
while (c < 22) {
s[a][b] = s[a][b] + p[a][b] * r[a][b];
c = c + 3;
}
b = b + 2;
}
a = a + 1;
}
int d, e;
e = 3;
for( d = 0; d < e; d ++)
{
 int f = 0;
 f = e + d;
}
/* This is a test for comments */

pcg  proj1.pt < ../test/rmascare-right.inp
pcg  proj1.pt < ../test/rmascare-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 15: ("int" " " "d" "," " " "e" ";" "
" "e" " " "=" " " "3" ";" "
" "for" "("...)
=> ""

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/ssmith14-right.inp
int a;
b = 2;
if(c == 1)
{
	/* asdf */
	i = 1;
}
while(c == 1)
{
	j = 1;
	if(c == 2)
		i = 1;
}

pcg  proj1.pt < ../test/ssmith14-right.inp
pcg  proj1.pt < ../test/ssmith14-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template Conditional_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/tdoss-right.inp
	1 + 2;

	{ { {} {1+4;} } {} }
	{ {} { {1-4;} {} } }

	int i, j, k;
pcg  proj1.pt < ../test/tdoss-right.inp
pcg  proj1.pt < ../test/tdoss-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Compound_stmt
 From parsing code template Stmt
 From parsing code template Stmt_list
 From parsing code template Stmt_list2
 From parsing code template Stmt_list
 From parsing code template Base2
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
FAILED
testing  ../test/tmacmill-right.inp
float a[100][100][211], b[100], c[101][101], hamlet;
int i, j, k, a[11];
i = 0;
while ((i < 100)||(2 == 4)) {
j = 0;
while (j <= 100) {
if (!(c[i][j] == 0.0))
c[i][j] = 0.0;
k = 0;
if (k < 100) {
c[i][j] = c[i][j] + a[i][k] * b[k][j];
k = k + 1;
}
else {
j = j + 1;
}
}
i = i + 1 *3*2*k*j-2;
int q;
q = -1;
}

pcg  proj1.pt < ../test/tmacmill-right.inp
pcg  proj1.pt < ../test/tmacmill-right.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 16: ("int" " " "q" ";" "
" "q" " " "=" " " "-" "1" ";" "
" "}" "
" "
")
=> "}"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing wrong inputs:
testing  ../test/alanghar-wrong.inp
this_should_fail
14_id_starting_with_number;
int invalid[3;];
float invalid[3.5];
if(if(true))
}{
*/ /*
/* *** */*/*/pcg  proj1.pt < ../test/alanghar-wrong.inp
pcg  proj1.pt < ../test/alanghar-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("14" "_id_starting_with_number" ";" "
" "int" " " "invalid" "[" "3" ";" "]" ";" "
" "float" " " "in......
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/alynn-wrong.inp
int x, y;
x = 208
y = int
int float z;

if (x > y) {
z = 356.12;
z int != 52;
pcg  proj1.pt < ../test/alynn-wrong.inp
pcg  proj1.pt < ../test/alynn-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("y" " " "=" " " "int" "
" "int" " " "float" " " "z" ";" "
" "
" "if" " " "("...)
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/amoorhou-wrong.inp
/*I AM HAVING AN ISSUE CONTINUING AFTER I HAVE AN ERROR*/
/*AT THE FIRST ERROR IT PRINTS AND EXITS*/
int 2
float x;
flot a;
a [100;pcg  proj1.pt < ../test/amoorhou-wrong.inp
pcg  proj1.pt < ../test/amoorhou-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Error: empty string encountered when computing lookahead information for Decl_list
 From parsing code template Base
 From parsing code template Start
At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/bwoodroo-wrong.inp
int a;
int b

a = 5
b = 7;

a +- b

while (b = 5 {)}
pcg  proj1.pt < ../test/bwoodroo-wrong.inp
pcg  proj1.pt < ../test/bwoodroo-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 3: ("b" " " "=" " " "7" ";" "
" "
" "a" " " "+" "-" " " "b" "
" "
" "while"...)
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/chare-wrong.inp
float x;
int a, b, c;
{a = b + c; d = a * e; ]

while(a > b) {
a = a - 2;
}
pcg  proj1.pt < ../test/chare-wrong.inp
pcg  proj1.pt < ../test/chare-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("]" "
" "
" "while" "(" "a" " " ">" " " "b" ")" " " "{" "
" "a" " " "="...)
=> "}"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/cstone2-wrong.inp
float b, c;
if { b = 2; }
int a [20];

pcg  proj1.pt < ../test/cstone2-wrong.inp
pcg  proj1.pt < ../test/cstone2-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("{" " " "b" " " "=" " " "2" ";" " " "}" "
" "int" " " "a" " " "[" "20"...)
=> "("

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/dsudaria-wrong.inp
float 1;
int 5.5
pcg  proj1.pt < ../test/dsudaria-wrong.inp
pcg  proj1.pt < ../test/dsudaria-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("int" " " "5" "." "5" "
")
=> ""

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/jdobler-wrong.inp
int this_variable12;
this_variable  = 589;
float no2_variable;
no2_variable= 2.5675;
while ( a <= 12 )
{
  int b;
  b =0;
  a = a + 1;
  no2_variable = b * a;
}
 /*my error will occur here as the comment does not end
a = b + 1;
this_variable = no2_variable / 56;
pcg  proj1.pt < ../test/jdobler-wrong.inp
pcg  proj1.pt < ../test/jdobler-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("float" " " "no2_variable" ";" "
" "no2_variable" "=" " " "2" "." "5675" ";" "
" "while" " " "(" " ......
=> ""

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/jfoster7-wrong.inp
if(a<-4)
b;
if(a<=2 && b=2) //nothing needed beyond a bad statement
pcg  proj1.pt < ../test/jfoster7-wrong.inp
pcg  proj1.pt < ../test/jfoster7-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 2: ("/" "/" "nothing" " " "needed" " " "beyond" " " "a" " " "bad" " " "statement" "
")
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/jjudd2-wrong.inp
int int a
a = 0;
pcg  proj1.pt < ../test/jjudd2-wrong.inp
pcg  proj1.pt < ../test/jjudd2-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("int" " " "a" "
" "a" " " "=" " " "0" ";" "
")
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/jlail-wrong.inp
int x
y = asdf
corn
possible error here;pcg  proj1.pt < ../test/jlail-wrong.inp
pcg  proj1.pt < ../test/jlail-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 2: ("corn" "
" "possible" " " "error" " " "here" ";")
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/kknight-wrong.inp
float x[5];

x[] = 4;
pcg  proj1.pt < ../test/kknight-wrong.inp
pcg  proj1.pt < ../test/kknight-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: "]"
=> ID

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/mbrown22-wrong.inp
int a, b[100], c[2000][10], d[a];
float g, h[a][100], i;

a[g] = (a[12]+b)-c*c/w;

while(a=c) 
{
   while(b<=c) int a
}

if(!g[100]==h)
{
   if(i!=j))
   {
      int y;
      if(k==l) int b;
   }
}
else
{
   int x;
}
pcg  proj1.pt < ../test/mbrown22-wrong.inp
pcg  proj1.pt < ../test/mbrown22-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 4: ("int" " " "a" "
" "}" "
" "
" "if" "(" "!" "g" "[" "100" "]" "==" "h" ")"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/mevans-wrong.inp
int arr[3];
arr[0];
arr[1];
arr[2];
float x = 0.33;
int y = 0;
/* comment */
if (x <= 0.25) {
y = y + 1;
} if (arr[0] > -(y))) {
// do nothing
}
} else {
while (x > 0.2.5) {
// should not reach the error above
x =; // or this one
}
}
pcg  proj1.pt < ../test/mevans-wrong.inp
pcg  proj1.pt < ../test/mevans-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 3: ("float" " " "x" " " "=" " " "0" "." "33" ";" "
" "int" " " "y" " " "=" " "...)
=> ""

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/pchurch2-wrong.inp
int a, b, c
float x y, z;
x = 21.;
if (x <== 10)
if (x >= 20);
if (xyz! != 30)
if (x ==== 40)
counter = 0
while ((counter < 10) {
	int value;]
	value == 1;
	!value = value + counter;
	counter = counter + 1 -;
	if (value != 20)]
	if (value == )
}
pcg  proj1.pt < ../test/pchurch2-wrong.inp
pcg  proj1.pt < ../test/pchurch2-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("float" " " "x" " " "y" "," " " "z" ";" "
" "x" " " "=" " " "21" "." ";"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/pleedom-wrong.inp
int a,b,c[10];
if (a == 0) int f;
if (1=1) {
9+9;
}
pcg  proj1.pt < ../test/pleedom-wrong.inp
pcg  proj1.pt < ../test/pleedom-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("int" " " "f" ";" "
" "if" " " "(" "1" "=" "1" ")" " " "{" "
" "9" "+"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/rmascare-wrong.inp
char 9;
float s;
string k = 0;
while (x ==p)
*/comment*/
int 2 
printf(""+int);
do(x){}while(u);
pcg  proj1.pt < ../test/rmascare-wrong.inp
pcg  proj1.pt < ../test/rmascare-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("9" ";" "
" "float" " " "s" ";" "
" "string" " " "k" " " "=" " " "0" ";" "
"...)
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/ssmith14-wrong.inp
int a = [5];
for(/* */)
{
}
int a[5.1];
while
{
}
if
{
}
int a;
else
{
}

pcg  proj1.pt < ../test/ssmith14-wrong.inp
pcg  proj1.pt < ../test/ssmith14-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("=" " " "[" "5" "]" ";" "
" "for" "(" "/" "*" " " "*" "/" ")" "
" "{"...)
=> "{"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/tdoss-wrong.inp
x = float;
pcg  proj1.pt < ../test/tdoss-wrong.inp
pcg  proj1.pt < ../test/tdoss-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 0: ("float" ";" "
")
=> "("

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
testing  ../test/tmacmill-wrong.inp
int j, f, d;

while(d==f) {
float ext;
5 = ext;


pcg  proj1.pt < ../test/tmacmill-wrong.inp
pcg  proj1.pt < ../test/tmacmill-wrong.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Start#Base#Base2#(
      Decl#(
        Type_spec#"int",
        (Iden#Iden2#(
              "j",
              "")
          Iden#Iden2#(
              "f",
              "")
          Iden#Iden2#(
              "d",
              "")
           NULL)),
      Stmt_list#(
        Stmt#While_stmt#(
            Exp#(
              Assign_exp#(
                Logic_OR_exp#(
                  Logic_AND_exp#(
                    Equal_exp#(
                      Relation_exp#(
                        Add_exp#(
                          Mult_exp#(
                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                      "d",
                                      ""),
                            Mult_exp_mul#Mult_exp_div#""),
                          Add_exp_plus#Add_exp_minus#""),
                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                      Equal_exp2#"=="Equal_exp#(
                          Relation_exp#(
                            Add_exp#(
                              Mult_exp#(
                                Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                          "f",
                                          ""),
                                Mult_exp_mul#Mult_exp_div#""),
                              Add_exp_plus#Add_exp_minus#""),
                            Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                          Equal_exp2#"")
                         NULL),
                    Logic_AND_exp2#""),
                  Logic_OR_exp2#""),
                Assign_exp2#""),
              Exp2#""),
            Stmt#Compound_stmt#Base#Base2#(
                    Decl#(
                      Type_spec#"float",
                      Iden#Iden2#(
                          "ext",
                          "")),
                    Stmt_list#(
                      Stmt#Exp#(
                          Assign_exp#(
                            Logic_OR_exp#(
                              Logic_AND_exp#(
                                Equal_exp#(
                                  Relation_exp#(
                                    Add_exp#(
                                      Mult_exp#(
                                        Unary_exp#Primary_exp#Value#Num#(
                                                ICONST#5,
                                                FCONST#""),
                                        Mult_exp_mul#Mult_exp_div#""),
                                      Add_exp_plus#Add_exp_minus#""),
                                    Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                  Equal_exp2#""),
                                Logic_AND_exp2#""),
                              Logic_OR_exp2#""),
                            Assign_exp2#"="Assign_exp#(
                                Logic_OR_exp#(
                                  Logic_AND_exp#(
                                    Equal_exp#(
                                      Relation_exp#(
                                        Add_exp#(
                                          Mult_exp#(
                                            Unary_exp#Primary_exp#Value#Iden#Iden2#(
                                                      "ext",
                                                      ""),
                                            Mult_exp_mul#Mult_exp_div#""),
                                          Add_exp_plus#Add_exp_minus#""),
                                        Rel_exp_lt#Rel_exp_gt#Rel_exp_lte#Rel_exp_gte#""),
                                      Equal_exp2#""),
                                    Logic_AND_exp2#""),
                                  Logic_OR_exp2#""),
                                Assign_exp2#"")
                               NULL),
                          Exp2#""),
                      Stmt_list2#""))),
        Stmt_list2#""))
FAILED
testing  ../test/wrong1.inp
int 2
float x;
pcg  proj1.pt < ../test/wrong1.inp
pcg  proj1.pt < ../test/wrong1.inp
Reading POET instructions from file proj1.pt
Done reading POET instructions file proj1.pt
Reading POET syntax from file proj1.code
Done reading POET syntax file proj1.code
Reading POET input from stdin
Done reading POET input file 
Parsing type mismatch at line 1: ("float" " " "x" ";" "
")
=> ";"

At line 1 of file proj1.pt from <input to=input syntax="proj1.code" from=("")/>
make: *** [run] Error 1
